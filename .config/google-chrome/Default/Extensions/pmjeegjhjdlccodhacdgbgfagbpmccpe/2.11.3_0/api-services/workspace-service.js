class UserWorkspaceStorage extends ClockifyService{constructor(e=DefaultProjectEnums.DEFAULT_PROJECTS,t,s=!0){super(),this.storageName=e,this.isPermanent=s,this.workspaceId=t.workspaceId,this.userId=t.userId;const a=t.ws,r=a?JSON.parse(a):{forceTasks:!1};this.forceTasks=r.forceTasks;const i=t.str;let o=i?JSON.parse(i):{};if(Array.isArray(o)){const e={};o.map((t=>{const{userId:s,workspaceId:a,project:r,enabled:i}=t;let o=e[s];o||(o=e[s]={});let c=o[a];c||(c=o[a]={}),c.defaultProject={project:{id:r.id,name:r.name,selectedTask:r.selectedTask?{id:r.selectedTask.id,name:r.selectedTask.name}:null},enabled:i}})),this.storage=e,this.store()}else this.storage=o}static get userId(){return localStorage.getItem("userId")}static get workspaceId(){return localStorage.getItem("activeWorkspaceId")}static get apiEndpoint(){return localStorage.getItem("permanent_baseUrl")}static get token(){return localStorage.getItem("token")}static async getProjectPickerTaskFilter(){let e=`${await this.apiEndpoint}/v1/user`;const{data:t,error:s,status:a}=await this.apiCall(e);return!!t&&t.settings.projectPickerTaskFilter}static async getSetWorkspaceSettings(e){const t=await this.apiEndpoint,s=await this.workspaceId,a=JSON.parse(await localStorage.getItem("userSettings"));e=e||a&&a.projectPickerTaskFilter||!1;let r=`${t}/workspaces/${s}`;const{data:i,error:o,status:c}=await this.apiCall(r);if(i){const{workspaceSettings:t,features:s,featureSubscriptionType:a}=i;t.projectPickerSpecialFilter=e,t.features={featureSubscriptionType:a,customFields:s.includes("CUSTOM_FIELDS"),timeTracking:s.includes("TIME_TRACKING")},localStorage.setItem("workspaceSettings",JSON.stringify(t));const{forceDescription:r,forceProjects:o,forceTasks:c,forceTags:l,projectPickerSpecialFilter:n,projectFavorites:d}=t;aBrowser.storage.local.set({wsSettings:{forceDescription:r,forceProjects:o,forceTasks:c,forceTags:l,projectPickerSpecialFilter:n,projectFavorites:d,features:{customFields:s.includes("CUSTOM_FIELDS"),timeTracking:s.includes("TIME_TRACKING")}}})}return{data:i,error:o,status:c}}static async getPermissionsForUser(){const e=await this.workspaceId,t=await this.userId,s=`${await this.apiEndpoint}/workspaces/${e}/users/${t}/permissions`;return this.apiCall(s)}static async getWorkspacesOfUser(){const e=`${await this.apiEndpoint}/workspaces/`;return this.apiCall(e)}get Workspace(){const e=this.storage;let t=e[this.userId];t||(t=e[this.userId]={});let s=t[this.workspaceId];return s||(s=t[this.workspaceId]={}),s}get Storage(){return this.storage}get defaultProject(){const e=this.Workspace;return e.defaultProject?new DefaultProject(e.defaultProject,{workspaceId:this.workspaceId,userId:this.userId,forceTasks:this.forceTasks}):null}setInitialDefaultProject(){let e=this.Workspace;return e.defaultProject={project:{id:DefaultProjectEnums.LAST_USED_PROJECT,name:clockifyLocales.LAST_USED_PROJECT},enabled:!0},this.store(),e.defaultProject}setDefaultProject(e){this.Workspace.defaultProject={project:{id:e.id,name:e.name,selectedTask:e.selectedTask?{id:e.selectedTask.id,name:e.selectedTask.name}:null},enabled:!0},this.store()}toggleEnabledOfDefaultProject(){const e=this.Workspace,{defaultProject:t}=e;t&&(t.enabled=!t.enabled,this.store())}removeDefaultProject(){this.Workspace.defaultProject=null}store(){localStorage.setItem(this.storageName,JSON.stringify(this.storage),this.isPermanent?"permanent_":null)}static async getWasRegionalEverAllowed(){const e=`${await this.apiEndpoint}/workspaces/${await this.workspaceId}/payments/was-regional-ever-allowed`;return await this.apiCall(e).then((e=>(localStorage.setItem("wasRegionalEverAllowed",e.data),e.data)))}}