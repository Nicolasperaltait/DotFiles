class AnalyticsService extends ClockifyService{static async sendAnalyticsEvent(e={}){if("undefined"!=typeof browser)return;const t=await this.userId,a=await this.getClientId(),n=await this.apiEndpoint,r=await localStorage.getItem("activeWorkspaceId"),i=`${n}/workspaces/${r}/google-analytics`,{analyticsEventName:c,eventParameters:s}=e,o={event_name:c,event_parameters:s,user_properties:{user_id:t,workspace_id:r,client_id:a}};try{return await this.apiCall(i,"POST",function e(t){if("object"!=typeof t)return t;for(const a in t){const n=a.replace(/([A-Z])/g,(e=>"_"+e.toLowerCase()));n!=a&&t.hasOwnProperty(a)&&(t[n]=t[a],delete t[a]),"object"==typeof t[n]&&(t[n]=e(t[n]))}return t}(o))}catch(e){throw console.error("Error sending analytics event:",e),e}}static async getClientId(){const e=await chrome.storage.local.get("clientId");return e?.clientId?e.clientId:await this.createAndSetClientId()}static async createAndSetClientId(){const e=self.crypto.randomUUID();return await chrome.storage.local.set({clientId:e}),e}}