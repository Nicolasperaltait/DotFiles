class IntegrationSelectors{static externalResource="https://clockify.me/downloads/selectors.json";static internalResource="../integrations/selectors.json";static fetchAndStore=async({onlyIfPassedFollowingMinutesSinceLastFetch:t}={})=>{try{const e=t??0;if(!await this.isExpired({minimumMinutesBetweenFetches:e}))return;const s=await this.fetch(this.externalResource,{cache:"no-store"});await this.store(s)}catch(t){console.error("Fetching selectors remotely failed:",t);try{const t=await this.fetch(this.internalResource);await this.store(t)}catch(t){console.error("Fetching selectors locally failed:",t)}}};static isExpired=async({minimumMinutesBetweenFetches:t})=>{try{const e=Date.now();return e-await this.getLastFetchTime()>6e4*t}catch(t){throw console.error("Error checking expiry:",t),t}};static getLastFetchTime=async()=>{try{const t=await localStorage.getItem("integrationSelectorsLastFetchTime");return t?parseInt(t):0}catch(t){throw console.error("Error getting last fetch time:",t),t}};static fetch=async(t,e={})=>{try{const s=await fetch(t,e);if(!s.ok)throw new Error("Unsuccessful response.");return await s.json()}catch(t){throw t}};static store=async t=>{try{const e=Date.now().toString();await localStorage.setItem("integrationSelectors",t),await localStorage.setItem("integrationSelectorsLastFetchTime",e)}catch(t){throw console.error("Error storing selectors:",t),t}}}