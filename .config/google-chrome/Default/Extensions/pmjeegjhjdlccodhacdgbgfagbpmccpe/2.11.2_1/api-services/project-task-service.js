class ProjectTaskService extends ClockifyService{static async wsSettings(){const t=await localStorage.getItem("workspaceSettings");return t?JSON.parse(t):null}static async getProjectFavorites(){const t=await this.wsSettings();return!t||t.projectFavorites}static async getUrlProjects(t=!1){return`${await this.apiEndpoint}/${t?"v1/":""}workspaces/${await this.workspaceId}/projects`}static async getOrCreateProjectAndTask(t,a){const{forceTasks:e}=await this.getForces();let{projectDB:r,taskDB:s,msg:i,found:c,created:o,onlyAdminsCanCreateProjects:n,projectArchived:l}=await this.getOrCreateProject(t),d=i||"";if(l&&(d+=t+" is archived."),n&&(d+="Only Admins can create projects."),r&&(c||o)){if(a&&a.name){const t=a.name.trim().replace(/\s+/g," "),{task:e,error:i}=await ProjectTaskService.getOrCreateTask(r,t);i&&(d+=i.message),s=e}if(e&&!s){const{projectDB:t,taskDB:a,msg:e,msgId:i}=await DefaultProject.getProjectTaskFromDB();e&&(d+=" "+e),t&&(r=t),s=a}}return{projectDB:r,taskDB:s,message:d}}static async getOrCreateProject(t){let a;const{projectPickerSpecialFilter:e}=await this.getForces();let r;t=t.trim().replace(/\s+/g," "),a=e?"@"+t:t;const{projects:s,error:i}=await this.getProjectWithFilter(a,0,50);if(i)return{projectDB:null,error:i};s&&s.length>0&&(r=s.find((a=>a.name===t)));let c=!1,o=!1;const n=await this.getCreateObjects();if(await this.getCanCreateProjects(),r){if(!r.archived)return{projectDB:r,found:!0};o=!0}else if(n){let a=await this.wsSettings();const e={name:t};null!=a?.defaultBillableProjects&&(e.billable=a.defaultBillableProjects);const{data:r,error:s,status:i}=await this.createProject(e);if(201===i)return{projectDB:r,created:!0};const{errorData:o}=s;o&&501===o.code&&await localStorage.setItem("createProjectError","true"),s&&403===s.status&&(c=!0)}const{projectDB:l,taskDB:d,msg:p,msgId:h}=await DefaultProject.getProjectTaskFromDB();return{projectDB:l,taskDB:d,msg:p,msgId:h,projectArchived:o,onlyAdminsCanCreateProjects:c}}static async getOrCreateTask(t,a){let e=null,r=(t.tasks||[]).find((t=>t.name===a));if(!r){let{data:s,error:i}=await this.getTaskOfProject({projectId:t.id,taskName:encodeURIComponent(a)});s=s?.filter((t=>t.name===a)),r=s&&s.length>0?s[0]:null,e=i}const s=await this.getCreateObjects(),i=await this.getCanCreateTasks();if(!r&&s&&i){const{data:s,error:i,status:c}=await this.createTask({projectId:t.id,name:a});r=s,i&&(i.status,e=i)}return{task:r,error:e}}static async getProjectWithFilter(t,a,e){const{projectPickerSpecialFilter:r}=JSON.parse(await localStorage.getItem("userSettings")),s=encodeURIComponent(t.trim()),i=`${await this.apiEndpoint}/workspaces/${await this.workspaceId}/project-picker/projects?page=${a}&${r?"search=@":"search="}${s}`,{data:c,error:o}=await this.apiCall(i);return{projects:c,error:o}}static async createProject(t){const a=await this.getUrlProjects(!0);return await this.apiCall(a,"POST",t)}static async createTask({projectId:t,name:a}){const e=`${await this.getUrlProjects(!0)}/${t}/tasks`,r={name:a,projectId:t};return await this.apiCall(e,"POST",r)}static async getLastUsedProjectFromTimeEntries(t){const a=await this.getUrlProjects();let e,r,s;if(t&&({data:e,error:r,status:s}=await this.getLastUsedProjectAndTaskFromTimeEntries()),e)return{data:e,error:r,status:s};{const t=`${a}/lastUsed?type=PROJECT`;({data:e,error:r,status:s}=await this.apiCall(t))}return{data:e,error:r,status:s}}static async getLastUsedProjectAndTaskFromTimeEntries(){let t=`${await this.getUrlProjects()}/lastUsed?type=PROJECT_AND_TASK`,{data:a,error:e,status:r}=await this.apiCall(t);return{data:a,error:e,status:r}}static getProjects(t,a,e){return this.getProjectsWithFilter("",t,a,e)}static async getProjectsByIds(t,a){const e=`${await this.getUrlProjects()}/ids`,r={ids:t},{data:s,error:i,status:c}=await this.apiCall(e,"POST",r);if(i)return{error:i};if(200===c&&s.length>0){const t=s[0];if(a){const{tasks:e,error:r,status:s}=await this.getAllTasks(a);r||(t.tasks=[e[0]])}return{projectDB:t,error:i,status:c}}return{projectDB:null,error:i,status:c}}static async getTask(t){const a=`${await this.getUrlProjects()}/taskIds`,e={ids:[t]},{data:r,error:s,status:i}=await this.apiCall(a,"POST",e);return 200===i&&r.length>0?r[0]:null}static async getTaskOfProject({projectId:t,taskName:a}){const e=`${await this.getUrlProjects()}/${t}/tasks?name=${a}&strict-name-search=true`,{data:r,error:s,status:i}=await this.apiCall(e,"GET");return{data:r,error:s,status:i}}static async getAllTasks(t){const a=`${await this.getUrlProjects()}/taskIds`,e={ids:t},{data:r,error:s,status:i}=await this.apiCall(a,"POST",e);return{tasks:r,error:s,status:i}}static async getProjectsWithFilter(t,a,e,r=!1,s=[]){const i=encodeURIComponent(t.trim()),c=await this.apiEndpoint,o=await this.workspaceId,n=`${c}/workspaces/${o}/project-picker/projects?search=${i}`,l=`${c}/workspaces/${o}/project-picker/projects?favorites=false&clientId=&excludedTasks=&search=${i}&userId=`;if(await this.getProjectFavorites()){const{data:t,error:i}=await this.addFavs(s,n,[],1,e,r);return i?{data:t,error:i}:t.length>=e?{data:t}:await this.addNonFavs(s,l,t,a,e,r)}return await this.addPage(s,l,[],a,e,r)}static async addFavs(t,a,e,r,s,i){let c=`${a}&page=${r}&pageSize=${s}&favorites=true`;const{data:o,error:n}=await this.apiCall(c);return n?{data:o,error:n}:(o.forEach((a=>{!t.includes(a.id)&&e.length<s&&(!i||a.taskCount>0)&&e.push(a)})),{data:e,error:n})}static async addNonFavs(t,a,e,r,s,i){let c=`${a}&pageSize=${s}&page=${r}`;const{data:o,error:n}=await this.apiCall(c);return n?{data:o,error:n}:(o.forEach((a=>{!a.favorite&&!t.includes(a.id)&&e.length<s&&(!i||a.taskCount>0)&&e.push(a)})),o.length<s||e.length>=s?{data:e,error:n}:await this.addNonFavs(t,a,e,r+1,s,i))}static async addPage(t,a,e,r,s,i){let c=`${a}&page=${r}`;const{data:o,error:n}=await this.apiCall(c);return n?{data:o,error:n}:(o.forEach((a=>{!t.includes(a.id)&&e.length<s&&(!i||a.taskCount>0)&&e.push(a)})),o.length<s||e.length>=s?{data:e,error:n}:await this.addPage(t,a,e,r+1,s,i))}static async getProjectTasksWithFilter(t,a,e){const r=encodeURIComponent(a.trim()),s=`${await this.apiEndpoint}/workspaces/${await this.workspaceId}/project-picker/projects/${t}/tasks?page=${e}&search=${r}`;return await this.apiCall(s)}static async makeProjectFavorite(t){const a=await this.apiEndpoint,e=await this.userId,r=`${a}/workspaces/${await this.workspaceId}/users/${e}/projects/favorites/${t}`;return await this.apiCall(r,"POST",{})}static async removeProjectAsFavorite(t){const a=await this.apiEndpoint,e=await this.userId,r=`${a}/workspaces/${await this.workspaceId}/users/${e}/projects/favorites/projects/${t}`;return await this.apiCall(r,"DELETE")}}